// Code generated by MockGen. DO NOT EDIT.
// Source: adapter/repositories/thirdparties/repo.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "be-cadidate-votes/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockThirdPartyRepo is a mock of ThirdPartyRepo interface.
type MockThirdPartyRepo struct {
	ctrl     *gomock.Controller
	recorder *MockThirdPartyRepoMockRecorder
}

// MockThirdPartyRepoMockRecorder is the mock recorder for MockThirdPartyRepo.
type MockThirdPartyRepoMockRecorder struct {
	mock *MockThirdPartyRepo
}

// NewMockThirdPartyRepo creates a new mock instance.
func NewMockThirdPartyRepo(ctrl *gomock.Controller) *MockThirdPartyRepo {
	mock := &MockThirdPartyRepo{ctrl: ctrl}
	mock.recorder = &MockThirdPartyRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockThirdPartyRepo) EXPECT() *MockThirdPartyRepoMockRecorder {
	return m.recorder
}

// CheckPasswordHash mocks base method.
func (m *MockThirdPartyRepo) CheckPasswordHash(password, hash string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPasswordHash", password, hash)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckPasswordHash indicates an expected call of CheckPasswordHash.
func (mr *MockThirdPartyRepoMockRecorder) CheckPasswordHash(password, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPasswordHash", reflect.TypeOf((*MockThirdPartyRepo)(nil).CheckPasswordHash), password, hash)
}

// CreateJWTToken mocks base method.
func (m *MockThirdPartyRepo) CreateJWTToken(secret string, claimExpired uint32, user models.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJWTToken", secret, claimExpired, user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateJWTToken indicates an expected call of CreateJWTToken.
func (mr *MockThirdPartyRepoMockRecorder) CreateJWTToken(secret, claimExpired, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJWTToken", reflect.TypeOf((*MockThirdPartyRepo)(nil).CreateJWTToken), secret, claimExpired, user)
}

// HashPassword mocks base method.
func (m *MockThirdPartyRepo) HashPassword(password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashPassword", password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HashPassword indicates an expected call of HashPassword.
func (mr *MockThirdPartyRepoMockRecorder) HashPassword(password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashPassword", reflect.TypeOf((*MockThirdPartyRepo)(nil).HashPassword), password)
}
