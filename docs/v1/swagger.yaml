definitions:
  models.CandidateResponse:
    properties:
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      vote_count:
        type: integer
    type: object
  models.CreateCandidateRequest:
    properties:
      description:
        type: string
      name:
        example: karen (Max 30 Chars)
        maxLength: 30
        type: string
    type: object
  models.GeneralResponse:
    properties:
      status:
        $ref: '#/definitions/models.ResponseStatus'
    type: object
  models.GetCandidateResponse:
    properties:
      data:
        $ref: '#/definitions/models.CandidateResponse'
      status:
        $ref: '#/definitions/models.ResponseStatus'
    type: object
  models.ListCandidateRequest:
    properties:
      limit:
        type: integer
      order_by_vote_count:
        type: boolean
      page:
        type: integer
      search_by_name:
        type: string
    type: object
  models.ListCandidateResponse:
    properties:
      data:
        $ref: '#/definitions/models.ListCandidateResponseData'
      status:
        $ref: '#/definitions/models.ResponseStatus'
    type: object
  models.ListCandidateResponseData:
    properties:
      candidate_count:
        type: integer
      candidates:
        items:
          $ref: '#/definitions/models.CandidateResponse'
        type: array
      limit:
        type: integer
      page:
        type: integer
      page_count:
        type: integer
    type: object
  models.LoginResponse:
    properties:
      data:
        $ref: '#/definitions/models.LoginResponseData'
      status:
        $ref: '#/definitions/models.ResponseStatus'
    type: object
  models.LoginResponseData:
    properties:
      access_token:
        type: string
    type: object
  models.RegisterUserRequest:
    properties:
      password:
        type: string
      username:
        example: john (Max 50 Chars)
        maxLength: 50
        type: string
    required:
    - password
    - username
    type: object
  models.RegisterUserResponse:
    properties:
      status:
        $ref: '#/definitions/models.ResponseStatus'
    type: object
  models.ResponseStatus:
    properties:
      app_code:
        type: string
      app_message:
        type: string
    type: object
  models.UpdateCandidateRequest:
    properties:
      description:
        type: string
      id:
        type: integer
      name:
        example: karen (Max 30 Chars)
        maxLength: 30
        type: string
    required:
    - id
    type: object
  models.VoteRequest:
    properties:
      candidate_id:
        type: integer
    required:
    - candidate_id
    type: object
  models.VoteStatus:
    properties:
      is_active:
        type: boolean
    type: object
info:
  contact: {}
paths:
  /:
    get:
      consumes:
      - '*/*'
      description: Just HealthCheck
      produces:
      - application/json
      responses:
        "200":
          description: response
          schema:
            additionalProperties: true
            type: object
      summary: HealthCheck
      tags:
      - Generals
  /api/v1/candidate:
    post:
      consumes:
      - application/json
      description: You can use this API to create candidates in the system.
      parameters:
      - description: Bearer ${token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Request body
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/models.CreateCandidateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GeneralResponse'
      summary: CreateCandidate
      tags:
      - Private (Candidate)
    put:
      consumes:
      - application/json
      description: You can use this API to update/edit candidate in the system.
      parameters:
      - description: Bearer ${token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Request body
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/models.UpdateCandidateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GeneralResponse'
      summary: UpdateCandidate
      tags:
      - Private (Candidate)
  /api/v1/candidate/{id}:
    delete:
      consumes:
      - application/json
      description: You can use this API to delete candidate in the system (Can use
        when candidate vote is 0).
      parameters:
      - description: Bearer ${token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Candidate ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GeneralResponse'
      summary: DeleteCandidate
      tags:
      - Private (Candidate)
    get:
      consumes:
      - application/json
      description: You can use this API to get candidate by id in the system.
      parameters:
      - description: Bearer ${token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Candidate ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetCandidateResponse'
      summary: GetCandidate
      tags:
      - Private (Candidate)
  /api/v1/candidates:
    delete:
      consumes:
      - application/json
      description: You can use this API to clear all candidates and votes in the system.
      parameters:
      - description: Bearer ${token}
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GeneralResponse'
      summary: ClearCandidates
      tags:
      - Private (Candidate)
  /api/v1/list-candidate:
    post:
      consumes:
      - application/json
      description: You can use this API to list candidate in the system.
      parameters:
      - description: Bearer ${token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Request body
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/models.ListCandidateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ListCandidateResponse'
      summary: ListCandidate
      tags:
      - Private (Candidate)
  /api/v1/login:
    post:
      consumes:
      - application/json
      description: Users need to use this API to log in and grant access token.
      parameters:
      - description: Request body
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/models.RegisterUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LoginResponse'
      summary: Login
      tags:
      - Public (User)
  /api/v1/register:
    post:
      consumes:
      - application/json
      description: You can use this API to create users in the system.
      parameters:
      - description: Request body
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/models.RegisterUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.RegisterUserResponse'
      summary: RegisterUser
      tags:
      - Public (User)
  /api/v1/vote:
    post:
      consumes:
      - application/json
      description: You can use this API to vote for candidates in the system. (User
        can only have 1 vote)
      parameters:
      - description: Bearer ${token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Request body
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/models.VoteRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GeneralResponse'
      summary: Vote
      tags:
      - Private (Vote)
  /api/v1/vote-status:
    put:
      consumes:
      - application/json
      description: You can use this API to update/edit vote status in the system.
      parameters:
      - description: Bearer ${token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Request body
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/models.VoteStatus'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GeneralResponse'
      summary: UpdateVoteStatus
      tags:
      - Private (Bonus)
  /api/v1/votes:
    delete:
      consumes:
      - application/json
      description: You can use this API to clear all votes in the system. (After clearing
        all votes user can vote again)
      parameters:
      - description: Bearer ${token}
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GeneralResponse'
      summary: ClearVotes
      tags:
      - Private (Vote)
swagger: "2.0"
